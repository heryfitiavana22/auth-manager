// Package structure: com.example.authmanager.infrastructure

// MariaDBUserRepository.java
package com.example.authmanager.infrastructure.repositories;

import com.example.authmanager.domain.entities.User;
import com.example.authmanager.domain.ports.UserRepository;
import com.example.authmanager.infrastructure.repositories.entities.UserEntity;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.Optional;

@ApplicationScoped
public class MariaDBUserRepository implements UserRepository {

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public void save(User user) {
        UserEntity userEntity = new UserEntity(user);
        entityManager.persist(userEntity);
    }

    @Override
    public Optional<User> findByEmail(String email) {
        UserEntity userEntity = entityManager.createQuery(
            "SELECT u FROM UserEntity u WHERE u.email = :email",
            UserEntity.class
        ).setParameter("email", email).getResultStream().findFirst().orElse(null);

        return Optional.ofNullable(userEntity != null ? userEntity.toDomain() : null);
    }
}

// UserEntity.java
package com.example.authmanager.infrastructure.repositories.entities;

import com.example.authmanager.domain.entities.User;
import jakarta.persistence.*;
import java.util.List;

@Entity
@Table(name = "users")
public class UserEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;
    private String password;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "user_roles",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    private List<RoleEntity> roles;

    public UserEntity() {}

    public UserEntity(User user) {
        this.name = user.getName();
        this.email = user.getEmail();
        this.password = user.getPassword();
        // Convert domain roles to entities here if needed
    }

    public User toDomain() {
        User user = new User();
        user.setName(this.name);
        user.setEmail(this.email);
        user.setPassword(this.password);
        // Convert entity roles to domain roles here if needed
        return user;
    }

    // Getters and setters
}

// RoleEntity.java
package com.example.authmanager.infrastructure.repositories.entities;

import jakarta.persistence.*;

@Entity
@Table(name = "roles")
public class RoleEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    public RoleEntity() {}

    // Getters and setters
}

// AuthController.java
package com.example.authmanager.infrastructure.controllers;

import com.example.authmanager.domain.entities.User;
import com.example.authmanager.domain.ports.AuthPort;
import jakarta.inject.Inject;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

@Path("/auth")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class AuthController {

    @Inject
    private AuthPort authPort;

    @POST
    @Path("/register")
    public Response registerUser(User user) {
        authPort.registerUser(user);
        return Response.status(Response.Status.CREATED).build();
    }

    @POST
    @Path("/login")
    public Response loginUser(@QueryParam("email") String email, @QueryParam("password") String password) {
        User user = authPort.loginUser(email, password);
        if (user != null) {
            return Response.ok(user).build();
        } else {
            return Response.status(Response.Status.UNAUTHORIZED).build();
        }
    }
}

// DatabaseConfig.java
package com.example.authmanager.infrastructure.config;

import jakarta.annotation.sql.DataSourceDefinition;
import jakarta.enterprise.context.ApplicationScoped;

@DataSourceDefinition(
    name = "java:global/jdbc/authManagerDS",
    className = "org.mariadb.jdbc.MariaDbDataSource",
    url = "jdbc:mariadb://localhost:3306/auth_manager",
    user = "admin",
    password = "admin"
)
@ApplicationScoped
public class DatabaseConfig {
}
